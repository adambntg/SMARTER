import React, { useState, useEffect } from "react";
import { CircularProgressbar } from "react-circular-progressbar";
import "react-circular-progressbar/dist/styles.css";
import "./MainPage.css";
import logoSmartWater from "./assets/logoSmartWater.png";

const MainPage = ({ getVal }) => {
  const [maxRotation, setMaxRotation] = useState(180);
  const [maxUptime, setMaxUptime] = useState(100);
  const [maxWaterVolume, setMaxWaterVolume] = useState(100);
  const [totalUptime, setTotalUptime] = useState(0);
  const [totalWaterVolume, setTotalWaterVolume] = useState(0);
  const [isOn, setIsOn] = useState(false);
  const [realtimeUptime, setRealtimeUptime] = useState(0); // State untuk uptime real-time

  useEffect(() => {
    let timer;
    if (isOn) {
      // Set timer to update uptime every second if IoT is ON
      timer = setInterval(() => {
        setRealtimeUptime((prevTime) => prevTime + 1); // Update realtime uptime setiap detik
      }, 1000);
    } else {
      clearInterval(timer); // Hentikan timer ketika IoT OFF
    }

    return () => clearInterval(timer); // Cleanup interval jika komponen di-unmount
  }, [isOn]);

  const toggleButton = () => setIsOn(!isOn);

  const handleUptimeChange = (e) => {
    setMaxUptime(e.target.value);
    setTotalUptime((prev) => prev + parseInt(e.target.value));
  };

  const handleWaterVolumeChange = (e) => {
    setMaxWaterVolume(e.target.value);
    setTotalWaterVolume((prev) => prev + parseInt(e.target.value));
  };

  const formatUptime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}h ${minutes}m ${secs}s`;
  };

  return (
    <div className="main-container">
      <div className="dashboard-card">
        {/* Logo */}
        <div className="logo-container">
          <img src={logoSmartWater} alt="SmartWater Logo" className="logo" />
        </div>
        <p className="main-title">Smart Water IoT Monitoring Dashboard</p>

        {/* Card Container */}
        <div className="card-container">
          {/* Total Uptime */}
          <div className="card card-uptime">
            <h3 className="card-title">Total Uptime</h3>
            <p>{totalUptime} hrs</p>
          </div>

          {/* Total Water Volume */}
          <div className="card card-water">
            <h3 className="card-title">Total Water Volume</h3>
            <p>{totalWaterVolume} L</p>
          </div>

          {/* Real-Time Uptime */}
          <div className="card card-uptime-realtime">
            <h3 className="card-title">Real-Time Uptime</h3>
            <span className="uptime-timer">{formatUptime(realtimeUptime)}</span>
          </div>

          {/* Rotasi Servo */}
          <div className="card card-rotation rotasi-servo-card">
            <p className="card-title">Rotasi Servo</p>
            <CircularProgressbar
              value={getVal}
              maxValue={360}
              text={`${getVal}°`}
              styles={{
                path: {
                  stroke: "#00d1b2",
                  strokeLinecap: "round",
                  strokeWidth: 10,
                },
                text: {
                  fill: "#fff",
                  fontSize: "1.5rem",
                  fontWeight: "bold",
                },
              }}
            />
          </div>

          {/* Max Rotation Slider */}
          <div className="card card-slider">
            <h3 className="card-title">Max Rotation</h3>
            <input
              type="range"
              min="0"
              max="360"
              value={maxRotation}
              onChange={(e) => setMaxRotation(e.target.value)}
              className="slider"
            />
            <p>{maxRotation}°</p>
          </div>

          {/* Max Uptime Slider */}
          <div className="card card-slider">
            <h3 className="card-title">Max Uptime</h3>
            <input
              type="range"
              min="0"
              max="100"
              value={maxUptime}
              onChange={handleUptimeChange}
              className="slider"
            />
            <p>{maxUptime} hrs</p>
          </div>

          {/* Max Water Volume Slider */}
          <div className="card card-slider">
            <h3 className="card-title">Max Water Volume</h3>
            <input
              type="range"
              min="0"
              max="100"
              value={maxWaterVolume}
              onChange={handleWaterVolumeChange}
              className="slider"
            />
            <p>{maxWaterVolume} L</p>
          </div>
        </div>

        {/* Button On/Off */}
        <div className="button-container">
          <button
            className={`button-control ${isOn ? "on" : "off"}`}
            onClick={toggleButton}
          >
            {isOn ? "Turn Off" : "Turn On"}
          </button>
        </div>

        {/* Date Picker */}
        <div className="date-picker-container">
          <input type="date" className="date-picker" />
        </div>

        {/* Chart Section */}
        <div className="chart-container">
          <p className="chart-title">Usage Trends</p>
          {/* Chart content here */}
        </div>
      </div>
    </div>
  );
};

export default MainPage;
